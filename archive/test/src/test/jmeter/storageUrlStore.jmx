<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Andmesalvestaja komponent: URL kaudu kasutusteabe logimise s천numi vastuv천tmine ja salvestamine" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="dbUrl" elementType="Argument">
            <stringProp name="Argument.name">dbUrl</stringProp>
            <stringProp name="Argument.value">jdbc:postgresql://aj03.ci.kit/dumonitor</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUser" elementType="Argument">
            <stringProp name="Argument.name">dbUser</stringProp>
            <stringProp name="Argument.value">dumonitor_app</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPassword" elementType="Argument">
            <stringProp name="Argument.name">dbPassword</stringProp>
            <stringProp name="Argument.value">aj22p</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="storageHost" elementType="Argument">
            <stringProp name="Argument.name">storageHost</stringProp>
            <stringProp name="Argument.value">aj03.ci.kit</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="storagePort" elementType="Argument">
            <stringProp name="Argument.name">storagePort</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="storageStorePath" elementType="Argument">
            <stringProp name="Argument.name">storageStorePath</stringProp>
            <stringProp name="Argument.value">/dumonitor-storage/store</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logtime" elementType="Argument">
            <stringProp name="Argument.name">logtime</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">dbpool</stringProp>
        <stringProp name="dbUrl">${dbUrl}</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${dbPassword}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${dbUser}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JMeter Users" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="TestPlan.comments">Kasutatakse selleks, et oleks v천imalik eristada erinevaid p채ringuid omavahel</stringProp>
          <stringProp name="maximumValue">1000000</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat">000000</stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">uuid</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="storageUrlStore" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="logtime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${logtime}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">logtime</stringProp>
              </elementProp>
              <elementProp name="actioncode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">REQ:getPersonData.v1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">actioncode</stringProp>
              </elementProp>
              <elementProp name="action" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">Get Person Data</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">action</stringProp>
              </elementProp>
              <elementProp name="personcode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">EE47101010033</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">personcode</stringProp>
              </elementProp>
              <elementProp name="receiver" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">Test receiver</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">receiver</stringProp>
              </elementProp>
              <elementProp name="receivercode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10000001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">receivercode</stringProp>
              </elementProp>
              <elementProp name="restrictions" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">A</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">restrictions</stringProp>
              </elementProp>
              <elementProp name="sender" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">Test AK</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sender</stringProp>
              </elementProp>
              <elementProp name="sendercode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20000001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sendercode</stringProp>
              </elementProp>
              <elementProp name="usercode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">EE12345678901</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">usercode</stringProp>
              </elementProp>
              <elementProp name="xroadservice" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">getPersonData</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">xroadservice</stringProp>
              </elementProp>
              <elementProp name="xroadrequestid" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">4894e35d-bf0f-44a6-867a-123456${uuid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">xroadrequestid</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${storageHost}</stringProp>
          <stringProp name="HTTPSampler.port">${storagePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${storageStorePath}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ok status" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ok response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1289584025">{&quot;ok&quot;:1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">dbpool</stringProp>
          <stringProp name="query">select * from ajlog where xroadrequestid = ? order by actioncode</stringProp>
          <stringProp name="queryArguments">4894e35d-bf0f-44a6-867a-123456${uuid}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">id, personcode, logtime, action, sender, receiver, restrictions, sendercode, receivercode, actioncode, xroadrequestid, xroadservice, usercode</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">Failure = true;
FailureMessage = &quot;Assertion script error&quot;;
try {
	log.debug(&quot;xroadrequestid_#: &quot; + vars.get(&quot;xroadrequestid_#&quot;));
	if (!&quot;1&quot;.equals(vars.get(&quot;xroadrequestid_#&quot;))) throw new Exception(&quot;Logimise viga: andmebaasikirjete arv ei ole 1&quot;);
	log.debug(&quot;actioncode_1: &quot; + vars.get(&quot;actioncode_1&quot;));
	if (!&quot;REQ:getPersonData.v1&quot;.equals(vars.get(&quot;actioncode_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;actioncode&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;action_1: &quot; + vars.get(&quot;action_1&quot;));
	if (!&quot;Get Person Data&quot;.equals(vars.get(&quot;action_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;action&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;personcode_1: &quot; + vars.get(&quot;personcode_1&quot;));
	if (!&quot;EE47101010033&quot;.equals(vars.get(&quot;personcode_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;personcode&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;receiver_1: &quot; + vars.get(&quot;receiver_1&quot;));
	if (!&quot;Test receiver&quot;.equals(vars.get(&quot;receiver_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;receiver&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;receivercode_1: &quot; + vars.get(&quot;receivercode_1&quot;));
	if (!&quot;10000001&quot;.equals(vars.get(&quot;receivercode_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;receivercode&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;restrictions_1: &quot; + vars.get(&quot;restrictions_1&quot;));
	if (!&quot;A&quot;.equals(vars.get(&quot;restrictions_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;restrictions&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;sender_1: &quot; + vars.get(&quot;sender_1&quot;));
	if (!&quot;Test AK&quot;.equals(vars.get(&quot;sender_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;sender&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;sendercode_1: &quot; + vars.get(&quot;sendercode_1&quot;));
	if (!&quot;20000001&quot;.equals(vars.get(&quot;sendercode_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;sendercode&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;usercode_1: &quot; + vars.get(&quot;usercode_1&quot;));
	if (!&quot;EE12345678901&quot;.equals(vars.get(&quot;usercode_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;usercode&apos; v채lja v채채rtus on vale&quot;);
	log.debug(&quot;xroadservice_1: &quot; + vars.get(&quot;xroadservice_1&quot;));
	if (!&quot;getPersonData&quot;.equals(vars.get(&quot;xroadservice_1&quot;))) throw new Exception(&quot;Logimise viga: &apos;xroadservice&apos; v채lja v채채rtus on vale&quot;);
	Failure = false;
	FailureMessage = &quot;&quot;;
	log.debug(&quot;Logimine OK&quot;);
} catch (Exception e) {
	FailureMessage = e.getMessage();
} catch (Throwable t) {
	log.warn(&quot;Error: &quot;, t);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">build/jmeter-report/results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">build/jmeter-report/graph.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
