<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Filtri komponendi koormustest" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="filterUrl" elementType="Argument">
            <stringProp name="Argument.name">filterUrl</stringProp>
            <stringProp name="Argument.value">http://aj02.ci.kit:8080/dumonitor-filter/testak</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testakUrl" elementType="Argument">
            <stringProp name="Argument.name">testakUrl</stringProp>
            <stringProp name="Argument.value">http://aj04.ci.kit:8080/testak/soap</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="parallelRequests" elementType="Argument">
            <stringProp name="Argument.name">parallelRequests</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpPeriod" elementType="Argument">
            <stringProp name="Argument.name">rampUpPeriod</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Warm-up Thread Group" enabled="true">
        <stringProp name="TestPlan.comments">Esmalt tehakse päringud ilma aega mõõtmata, et osalevatel komponentidel oleks kood juba cache laetud</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1461649352000</longProp>
        <longProp name="ThreadGroup.end_time">1461649352000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="testakLoadRequest-warmup" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${testakUrl}</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope 
	xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; 
	xmlns:xro=&quot;http://x-road.eu/xsd/xroad.xsd&quot; 
	xmlns:iden=&quot;http://x-road.eu/xsd/identifiers&quot; 
	xmlns:prod=&quot;http://producer.x-road.eu&quot;&gt;
   &lt;soapenv:Header&gt;
      &lt;xro:protocolVersion&gt;4.0&lt;/xro:protocolVersion&gt;
      &lt;xro:id&gt;4894e35d-bf0f-44a6-867a-8e51f1daa7e0&lt;/xro:id&gt;
      &lt;xro:userId&gt;EE12345678901&lt;/xro:userId&gt;
      &lt;xro:service iden:objectType=&quot;SERVICE&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;20000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;AJ&lt;/iden:subsystemCode&gt;
         &lt;iden:serviceCode&gt;getPersonData&lt;/iden:serviceCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:serviceVersion&gt;v1&lt;/iden:serviceVersion&gt;
      &lt;/xro:service&gt;
      &lt;xro:client iden:objectType=&quot;MEMBER&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;10000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;Center&lt;/iden:subsystemCode&gt;
      &lt;/xro:client&gt;
   &lt;/soapenv:Header&gt;
   &lt;soapenv:Body&gt;
      &lt;prod:getPersonData&gt;
         &lt;request&gt;
            &lt;personCode&gt;47101010033&lt;/personCode&gt;
         &lt;/request&gt;
      &lt;/prod:getPersonData&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <stringProp name="TestPlan.comments">Otse vastu testandmekogu tehtud päringud, et saada teada, palju kulub aega otsepäringute jaoks (lahutatakse maha filtri päringute ajast, et saada teada, palju filter ise aega kulutas)</stringProp>
        </SoapSampler>
        <hashTree/>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="filterLoadRequest-warmup" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${filterUrl}</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope 
	xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; 
	xmlns:xro=&quot;http://x-road.eu/xsd/xroad.xsd&quot; 
	xmlns:iden=&quot;http://x-road.eu/xsd/identifiers&quot; 
	xmlns:prod=&quot;http://producer.x-road.eu&quot;&gt;
   &lt;soapenv:Header&gt;
      &lt;xro:protocolVersion&gt;4.0&lt;/xro:protocolVersion&gt;
      &lt;xro:id&gt;4894e35d-bf0f-44a6-867a-8e51f1daa7e0&lt;/xro:id&gt;
      &lt;xro:userId&gt;EE12345678901&lt;/xro:userId&gt;
      &lt;xro:service iden:objectType=&quot;SERVICE&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;20000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;AJ&lt;/iden:subsystemCode&gt;
         &lt;iden:serviceCode&gt;getPersonData&lt;/iden:serviceCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:serviceVersion&gt;v1&lt;/iden:serviceVersion&gt;
      &lt;/xro:service&gt;
      &lt;xro:client iden:objectType=&quot;MEMBER&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;10000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;Center&lt;/iden:subsystemCode&gt;
      &lt;/xro:client&gt;
   &lt;/soapenv:Header&gt;
   &lt;soapenv:Body&gt;
      &lt;prod:getPersonData&gt;
         &lt;request&gt;
            &lt;personCode&gt;47101010033&lt;/personCode&gt;
         &lt;/request&gt;
      &lt;/prod:getPersonData&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JMeter Users" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${parallelRequests}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpPeriod}</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="testakLoadRequest" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${testakUrl}</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope 
	xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; 
	xmlns:xro=&quot;http://x-road.eu/xsd/xroad.xsd&quot; 
	xmlns:iden=&quot;http://x-road.eu/xsd/identifiers&quot; 
	xmlns:prod=&quot;http://producer.x-road.eu&quot;&gt;
   &lt;soapenv:Header&gt;
      &lt;xro:protocolVersion&gt;4.0&lt;/xro:protocolVersion&gt;
      &lt;xro:id&gt;4894e35d-bf0f-44a6-867a-8e51f1daa7e0&lt;/xro:id&gt;
      &lt;xro:userId&gt;EE12345678901&lt;/xro:userId&gt;
      &lt;xro:service iden:objectType=&quot;SERVICE&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;20000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;AJ&lt;/iden:subsystemCode&gt;
         &lt;iden:serviceCode&gt;getPersonData&lt;/iden:serviceCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:serviceVersion&gt;v1&lt;/iden:serviceVersion&gt;
      &lt;/xro:service&gt;
      &lt;xro:client iden:objectType=&quot;MEMBER&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;10000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;Center&lt;/iden:subsystemCode&gt;
      &lt;/xro:client&gt;
   &lt;/soapenv:Header&gt;
   &lt;soapenv:Body&gt;
      &lt;prod:getPersonData&gt;
         &lt;request&gt;
            &lt;personCode&gt;47101010033&lt;/personCode&gt;
         &lt;/request&gt;
      &lt;/prod:getPersonData&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <stringProp name="TestPlan.comments">Otse vastu testandmekogu tehtud päringud, et saada teada, palju kulub aega otsepäringute jaoks (lahutatakse maha filtri päringute ajast, et saada teada, palju filter ise aega kulutas)</stringProp>
        </SoapSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ok response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - multipart mime" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-743639980">Content-Type: multipart/related</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - attachment id" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-979418460">Content-ID: &lt;att&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">children</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">Salvestame päringu aja hilisemaks töötluseks</stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">long request1 = prev.getTime();
vars.put(&quot;testakTime&quot;, String.valueOf(request1)); 
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="filterLoadRequest" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">${filterUrl}</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope 
	xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; 
	xmlns:xro=&quot;http://x-road.eu/xsd/xroad.xsd&quot; 
	xmlns:iden=&quot;http://x-road.eu/xsd/identifiers&quot; 
	xmlns:prod=&quot;http://producer.x-road.eu&quot;&gt;
   &lt;soapenv:Header&gt;
      &lt;xro:protocolVersion&gt;4.0&lt;/xro:protocolVersion&gt;
      &lt;xro:id&gt;4894e35d-bf0f-44a6-867a-8e51f1daa7e0&lt;/xro:id&gt;
      &lt;xro:userId&gt;EE12345678901&lt;/xro:userId&gt;
      &lt;xro:service iden:objectType=&quot;SERVICE&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;20000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;AJ&lt;/iden:subsystemCode&gt;
         &lt;iden:serviceCode&gt;getPersonData&lt;/iden:serviceCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:serviceVersion&gt;v1&lt;/iden:serviceVersion&gt;
      &lt;/xro:service&gt;
      &lt;xro:client iden:objectType=&quot;MEMBER&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;10000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;Center&lt;/iden:subsystemCode&gt;
      &lt;/xro:client&gt;
   &lt;/soapenv:Header&gt;
   &lt;soapenv:Body&gt;
      &lt;prod:getPersonData&gt;
         &lt;request&gt;
            &lt;personCode&gt;47101010033&lt;/personCode&gt;
         &lt;/request&gt;
      &lt;/prod:getPersonData&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ok response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - multipart mime" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-743639980">Content-Type: multipart/related</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - attachment id" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-979418460">Content-ID: &lt;att&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">children</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="TestPlan.comments">Arvutame päringute ajalise erinevuse - see on järlikult filtri poolt täiendavalt kulutatud aeg</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">long request2 = prev.getTime();
long request1 = Long.parseLong(vars.get(&quot;testakTime&quot;));
long delta = (request2 - request1);
log.info(&quot;Time difference is: &quot; + delta + &quot; ms&quot;);
vars.put(&quot;filterTime&quot;, String.valueOf(request2)); 
vars.put(&quot;filterTimeDifference&quot;, String.valueOf(delta)); 
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">build/jmeter-report/results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">build/jmeter-report/graph.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
