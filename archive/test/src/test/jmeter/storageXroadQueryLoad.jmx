<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Andmesalvestaja komponendi X-tee päringuliidese koormustest" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="storageHost" elementType="Argument">
            <stringProp name="Argument.name">storageHost</stringProp>
            <stringProp name="Argument.value">aj03.ci.kit</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="storagePort" elementType="Argument">
            <stringProp name="Argument.name">storagePort</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="storageStorePath" elementType="Argument">
            <stringProp name="Argument.name">storageStorePath</stringProp>
            <stringProp name="Argument.value">/dumonitor-storage/store</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="storageXroadQueryPath" elementType="Argument">
            <stringProp name="Argument.name">storageXroadQueryPath</stringProp>
            <stringProp name="Argument.value">/dumonitor-storage/xroad</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logtime" elementType="Argument">
            <stringProp name="Argument.name">logtime</stringProp>
            <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="parallelRequests" elementType="Argument">
            <stringProp name="Argument.name">parallelRequests</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpPeriod" elementType="Argument">
            <stringProp name="Argument.name">rampUpPeriod</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logRecordCount" elementType="Argument">
            <stringProp name="Argument.name">logRecordCount</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="uuid" elementType="Argument">
            <stringProp name="Argument.name">uuid</stringProp>
            <stringProp name="Argument.value">999999</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 

Date futureDate = new Date(); 
Date pastDate = new Date();

// Päringu lõpp 1 ööpäev tulevikku
futureDate.setTime(futureDate.getTime()+1000*24*60*60); 
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
String formattedTime = df.format(futureDate); 
vars.put(&quot;logtime2&quot;,formattedTime); 

// Päringu algus 1 tund minevikku
pastDate.setTime(pastDate.getTime()-1000*60*60); 
df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
formattedTime = df.format(pastDate); 
vars.put(&quot;logtime1&quot;,formattedTime); 
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${logRecordCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1461401205000</longProp>
        <longProp name="ThreadGroup.end_time">1461401205000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="storageXroadQuery-Store" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;logtime&quot;: &quot;${logtime}&quot;,&#xd;
	&quot;actioncode&quot;: &quot;REQ:getPersonData.v1&quot;,&#xd;
	&quot;action&quot;: &quot;Get Person Data&quot;,&#xd;
	&quot;personcode&quot;: &quot;EE47101010033&quot;,&#xd;
	&quot;receiver&quot;: &quot;Test receiver&quot;,&#xd;
	&quot;receivercode&quot;: &quot;10000001&quot;,&#xd;
	&quot;restrictions&quot;: &quot;A&quot;,&#xd;
	&quot;sender&quot;: &quot;Test AK&quot;,&#xd;
	&quot;sendercode&quot;: &quot;20000001&quot;,&#xd;
	&quot;usercode&quot;: &quot;EE12345678901&quot;,&#xd;
	&quot;xroadservice&quot;: &quot;getPersonData&quot;,&#xd;
	&quot;xroadrequestid&quot;: &quot;4894e35d-bf0f-44a6-867a-123456${uuid}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${storageHost}</stringProp>
          <stringProp name="HTTPSampler.port">${storagePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${storageStorePath}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ok status" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ok response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1289584025">{&quot;ok&quot;:1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Warm-up Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1461650231000</longProp>
        <longProp name="ThreadGroup.end_time">1461650231000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="storageXroadQuery-warmup" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">http://${storageHost}:${storagePort}${storageXroadQueryPath}</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xro=&quot;http://x-road.eu/xsd/xroad.xsd&quot; xmlns:iden=&quot;http://x-road.eu/xsd/identifiers&quot; xmlns:prod=&quot;http://dumonitor.x-road.eu/producer&quot;&gt;
   &lt;soapenv:Header&gt;
      &lt;xro:protocolVersion&gt;4.0&lt;/xro:protocolVersion&gt;
      &lt;xro:id&gt;4894e35d-bf0f-44a6-867a-123456${uuidQuery}&lt;/xro:id&gt;
      &lt;xro:userId&gt;EE47101010033&lt;/xro:userId&gt;
      &lt;xro:service iden:objectType=&quot;SERVICE&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;20000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;AJ&lt;/iden:subsystemCode&gt;
         &lt;iden:serviceCode&gt;findUsage&lt;/iden:serviceCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:serviceVersion&gt;v1&lt;/iden:serviceVersion&gt;
      &lt;/xro:service&gt;
      &lt;xro:client iden:objectType=&quot;MEMBER&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;10000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;Center&lt;/iden:subsystemCode&gt;
      &lt;/xro:client&gt;
   &lt;/soapenv:Header&gt;
   &lt;soapenv:Body&gt;
      &lt;prod:findUsage&gt;
	&lt;offset&gt;0&lt;/offset&gt;
	&lt;limit&gt;${logRecordCount}&lt;/limit&gt;
      &lt;/prod:findUsage&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION">1</stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JMeter Users" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${parallelRequests}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampUpPeriod}</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
          <stringProp name="TestPlan.comments">Kasutatakse selleks, et oleks võimalik eristada erinevaid päringuid omavahel</stringProp>
          <stringProp name="maximumValue">1000000</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat">000000</stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">uuidQuery</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="storageXroadQuery" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SoapSampler.URL_DATA">http://${storageHost}:${storagePort}${storageXroadQueryPath}</stringProp>
          <stringProp name="HTTPSamper.xml_data">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xro=&quot;http://x-road.eu/xsd/xroad.xsd&quot; xmlns:iden=&quot;http://x-road.eu/xsd/identifiers&quot; xmlns:prod=&quot;http://dumonitor.x-road.eu/producer&quot;&gt;
   &lt;soapenv:Header&gt;
      &lt;xro:protocolVersion&gt;4.0&lt;/xro:protocolVersion&gt;
      &lt;xro:id&gt;4894e35d-bf0f-44a6-867a-123456${uuidQuery}&lt;/xro:id&gt;
      &lt;xro:userId&gt;EE47101010033&lt;/xro:userId&gt;
      &lt;xro:service iden:objectType=&quot;SERVICE&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;20000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;AJ&lt;/iden:subsystemCode&gt;
         &lt;iden:serviceCode&gt;findUsage&lt;/iden:serviceCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:serviceVersion&gt;v1&lt;/iden:serviceVersion&gt;
      &lt;/xro:service&gt;
      &lt;xro:client iden:objectType=&quot;MEMBER&quot;&gt;
         &lt;iden:xRoadInstance&gt;CI&lt;/iden:xRoadInstance&gt;
         &lt;iden:memberClass&gt;GOV&lt;/iden:memberClass&gt;
         &lt;iden:memberCode&gt;10000001&lt;/iden:memberCode&gt;
         &lt;!--Optional:--&gt;
         &lt;iden:subsystemCode&gt;Center&lt;/iden:subsystemCode&gt;
      &lt;/xro:client&gt;
   &lt;/soapenv:Header&gt;
   &lt;soapenv:Body&gt;
      &lt;prod:findUsage&gt;
	&lt;offset&gt;0&lt;/offset&gt;
	&lt;limit&gt;${logRecordCount}&lt;/limit&gt;
      &lt;/prod:findUsage&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
          <stringProp name="SoapSampler.xml_data_file"></stringProp>
          <stringProp name="SoapSampler.SOAP_ACTION">1</stringProp>
          <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
        </SoapSampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ok status" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - soap response" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="909915177">Content-Type: text/xml</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion - response element count" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">count(/SOAP-ENV:Envelope/SOAP-ENV:Body/prod:findUsageResponse/usage) = ${logRecordCount}</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">true</boolProp>
          </XPathAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">build/jmeter-report/results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">build/jmeter-report/graph.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
